# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing

class SessionMgr:
    def __new__(cls) -> SessionMgr: ...
    @staticmethod
    def new_from_csv(csv_file_path:builtins.str) -> SessionMgr:
        r"""
        创建失败时会爆出异常
        """
    @staticmethod
    def new_from_csv_content(csv_content:builtins.str) -> SessionMgr:
        r"""
        创建失败时会爆出异常
        """
    def reload_csv_content(self, csv_content:builtins.str, merge:builtins.bool) -> None:
        r"""
        注意sessions列,(json里面有逗号,需要多重双引号)
        ag,SHFE,"[{""Begin"":""09:00:00"",""End"":""10:15:00""},{""Begin"":""10:30:00"",""End"":""11:30:00""},{""Begin"":""13:30:00"",""End"":""15:00:00""},{""Begin"":""21:00:00"",""End"":""02:30:00""}]"
        """
    def reload_csv_file(self, csv_file_path:builtins.str, merge:builtins.bool) -> None:
        r"""
        注意sessions列,(json里面有逗号,需要多重双引号)
        ag,SHFE,"[{""Begin"":""09:00:00"",""End"":""10:15:00""},{""Begin"":""10:30:00"",""End"":""11:30:00""},{""Begin"":""13:30:00"",""End"":""15:00:00""},{""Begin"":""21:00:00"",""End"":""02:30:00""}]"
        """
    def has_session(self, product:builtins.str) -> builtins.bool: ...
    def get_session(self, product:builtins.str) -> TradeSession:
        r"""
        获取失败时会爆出异常
        """
    def day_begin(self, product:builtins.str) -> datetime.time:
        r"""
        获取失败时会爆出异常
        """
    def day_end(self, product:builtins.str) -> datetime.time:
        r"""
        获取失败时会爆出异常
        """
    def in_session(self, product:builtins.str, ts:datetime.time, include_begin:builtins.bool, include_end:builtins.bool) -> builtins.bool:
        r"""
        获取失败时会爆出异常
        """
    def any_in_session(self, product:builtins.str, start:datetime.time, end:datetime.time, include_begin_end:builtins.bool) -> builtins.bool:
        r"""
        start, end之间任意时间点落在session中吗?
        """
    def sessions_count(self) -> builtins.int: ...

class TradeSession:
    @staticmethod
    def new_commodity_session() -> TradeSession: ...
    @staticmethod
    def new_commodity_session_night() -> TradeSession: ...
    @staticmethod
    def new_stock_session() -> TradeSession: ...
    @staticmethod
    def new_stock_index_session() -> TradeSession: ...
    @staticmethod
    def new_full_session() -> TradeSession: ...
    def __new__(cls, minutes:typing.Sequence[builtins.int]) -> TradeSession: ...
    def day_begin(self) -> datetime.time: ...
    def day_end(self) -> datetime.time: ...
    def in_session(self, ts:datetime.time, include_begin:builtins.bool, include_end:builtins.bool) -> builtins.bool: ...
    def any_in_session(self, start:datetime.time, end:datetime.time, include_begin_end:builtins.bool) -> builtins.bool:
        r"""
        start, end之间任意时间点落在session中吗?
        """
    def minutes_list(self) -> builtins.list[builtins.int]: ...
    def add_slice(self, start_hour:builtins.int, start_minute:builtins.int, end_hour:builtins.int, end_minute:builtins.int) -> None: ...
    def post_fix(self) -> None: ...

